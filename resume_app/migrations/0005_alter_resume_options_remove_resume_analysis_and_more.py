# Generated by Django 5.1.6 on 2025-04-17 20:13

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('resume_app', '0004_resume_last_revision_date_resume_revision_count_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='resume',
            options={'ordering': ['-upload_date'], 'verbose_name': 'Resume', 'verbose_name_plural': 'Resumes'},
        ),
        migrations.RemoveField(
            model_name='resume',
            name='analysis',
        ),
        migrations.RemoveField(
            model_name='resume',
            name='last_revision_date',
        ),
        migrations.RemoveField(
            model_name='resume',
            name='revision_count',
        ),
        migrations.RemoveField(
            model_name='resume',
            name='rewritten_content',
        ),
        migrations.RemoveField(
            model_name='resume',
            name='text',
        ),
        migrations.RemoveField(
            model_name='resume',
            name='uploaded_at',
        ),
        migrations.AddField(
            model_name='resume',
            name='extracted_text',
            field=models.TextField(blank=True, help_text='Text extracted from the resume file for analysis.'),
        ),
        migrations.AddField(
            model_name='resume',
            name='file_size',
            field=models.BigIntegerField(blank=True, help_text='Size of the uploaded file in bytes.', null=True),
        ),
        migrations.AddField(
            model_name='resume',
            name='file_type',
            field=models.CharField(blank=True, help_text='Detected file type (e.g., application/pdf).', max_length=50),
        ),
        migrations.AddField(
            model_name='resume',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Indicates if the resume is currently active/usable.'),
        ),
        migrations.AddField(
            model_name='resume',
            name='title',
            field=models.CharField(blank=True, help_text="Optional title for the resume (e.g., 'Software Engineer Resume').", max_length=255),
        ),
        migrations.AddField(
            model_name='resume',
            name='upload_date',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, help_text='Timestamp when the resume was uploaded.'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='resume',
            name='file',
            field=models.FileField(help_text='The original uploaded resume file.', upload_to='resumes/'),
        ),
        migrations.AlterField(
            model_name='resume',
            name='user',
            field=models.ForeignKey(default=1, help_text='The user who uploaded this resume.', on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the analysis was performed.')),
                ('user_role', models.CharField(choices=[('jobseeker', 'Job Seeker'), ('recruiter', 'Recruiter')], default='jobseeker', help_text='Role of the user when analysis was done (mostly jobseeker here).', max_length=20)),
                ('skills_score', models.IntegerField(blank=True, help_text='Score (0-100) for skills match.', null=True)),
                ('experience_score', models.IntegerField(blank=True, help_text='Score (0-100) for experience relevance.', null=True)),
                ('education_score', models.IntegerField(blank=True, help_text='Score (0-100) for education alignment.', null=True)),
                ('overall_score', models.IntegerField(blank=True, help_text='Overall score (0-100) for the resume.', null=True)),
                ('key_insights', models.JSONField(blank=True, help_text='AI-generated key insights (list or dict).', null=True)),
                ('improvement_suggestions', models.JSONField(blank=True, help_text='AI-generated improvement suggestions (list or dict).', null=True)),
                ('resume', models.OneToOneField(help_text='The resume that was analyzed.', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='resume_app.resume')),
            ],
            options={
                'verbose_name': 'Resume Analysis',
                'verbose_name_plural': 'Resume Analyses',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the conversation started.')),
                ('end_date', models.DateTimeField(blank=True, help_text='Timestamp when the conversation ended (if applicable).', null=True)),
                ('title', models.CharField(blank=True, help_text='Optional title for the conversation.', max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', 'Archived'), ('closed', 'Closed')], default='active', help_text='Current status of the conversation.', max_length=20)),
                ('analysis', models.ForeignKey(blank=True, help_text='The analysis being discussed (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversations', to='resume_app.analysis')),
                ('resume', models.ForeignKey(blank=True, help_text='The resume being discussed (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversations', to='resume_app.resume')),
                ('user', models.ForeignKey(help_text='The user participating in the conversation.', on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='JobRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Untitled Job Requirement', help_text="Title of the job (e.g., 'Senior Backend Engineer').", max_length=255)),
                ('content', models.TextField(help_text='The full text content of the job description/requirements.')),
                ('upload_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the requirement was created/uploaded.')),
                ('user', models.ForeignKey(help_text='The recruiter who owns this job requirement.', limit_choices_to={'groups__name': 'Recruiters'}, on_delete=django.db.models.deletion.CASCADE, related_name='job_requirements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job Requirement',
                'verbose_name_plural': 'Job Requirements',
                'ordering': ['-upload_date'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(choices=[('user', 'User'), ('ai', 'AI')], help_text="Who sent the message ('user' or 'ai').", max_length=10)),
                ('content', models.TextField(help_text='The text content of the message.')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the message was created.')),
                ('is_read', models.BooleanField(default=False, help_text='Indicates if the message has been read by the recipient (primarily for user).')),
                ('conversation', models.ForeignKey(help_text='The conversation this message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='resume_app.conversation')),
                ('user_sender', models.ForeignKey(blank=True, help_text="The user who sent this message (if sender='user').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RecruiterAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the analysis was performed.')),
                ('job_description_snapshot', models.TextField(blank=True, help_text='Snapshot of the job description used for this specific analysis.')),
                ('comparative_analysis', models.TextField(blank=True, help_text='AI-generated text comparing the candidates.')),
                ('ranking', models.JSONField(blank=True, help_text='Ordered list of candidate identifiers (e.g., filenames or IDs).', null=True)),
                ('candidate_analysis_details', models.JSONField(blank=True, help_text='Detailed analysis results for each candidate in JSON format.', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Status of the recruiter analysis process.', max_length=20)),
                ('job_requirement', models.ForeignKey(help_text='The job requirement used for this analysis.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analyses', to='resume_app.jobrequirement')),
                ('user', models.ForeignKey(help_text='The recruiter who initiated this analysis.', limit_choices_to={'groups__name': 'Recruiters'}, on_delete=django.db.models.deletion.CASCADE, related_name='recruiter_analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recruiter Analysis',
                'verbose_name_plural': 'Recruiter Analyses',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='CandidateResume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume_identifier', models.CharField(help_text='Identifier for this resume (e.g., original filename).', max_length=255)),
                ('file', models.FileField(help_text='The candidate resume file uploaded by the recruiter.', upload_to='candidate_resumes/')),
                ('extracted_text', models.TextField(blank=True, help_text="Text extracted from the candidate's resume file.")),
                ('upload_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this candidate resume was added to the analysis.')),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processing', 'Processing'), ('analyzed', 'Analyzed'), ('error', 'Error')], default='uploaded', help_text='Processing status of this specific candidate resume.', max_length=20)),
                ('recruiter_analysis', models.ForeignKey(help_text='The recruiter analysis this resume belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='candidate_resumes', to='resume_app.recruiteranalysis')),
            ],
            options={
                'verbose_name': 'Candidate Resume (for Recruiter)',
                'verbose_name_plural': 'Candidate Resumes (for Recruiter)',
                'ordering': ['upload_date'],
            },
        ),
        migrations.CreateModel(
            name='UpgradedResume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_markdown', models.TextField(blank=True, help_text='The upgraded resume content, typically in Markdown format.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this upgraded version was created.')),
                ('last_updated_date', models.DateTimeField(auto_now=True, help_text='Timestamp when this upgraded version was last modified.')),
                ('title', models.CharField(blank=True, help_text="Optional title for this upgraded version (e.g., 'v2 - Tech Lead Focus').", max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='completed', help_text='Status of the generation/revision process.', max_length=20)),
                ('revision_count', models.IntegerField(default=0, help_text='Number of revisions applied to this specific upgraded version.')),
                ('analysis', models.ForeignKey(blank=True, help_text='The analysis that might have triggered this upgrade (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='upgraded_resumes', to='resume_app.analysis')),
                ('conversation', models.ForeignKey(blank=True, help_text='The conversation context for this upgrade (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='upgraded_resumes', to='resume_app.conversation')),
                ('original_resume', models.ForeignKey(blank=True, help_text='The original resume this was based on (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='upgraded_versions', to='resume_app.resume')),
                ('user', models.ForeignKey(help_text='The user this upgraded resume belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='upgraded_resumes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Upgraded Resume',
                'verbose_name_plural': 'Upgraded Resumes',
                'ordering': ['-creation_date'],
            },
        ),
    ]
